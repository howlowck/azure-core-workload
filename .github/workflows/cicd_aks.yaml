name: 'CICD AKS'

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    paths:
      - 'terraform/aks-basic/**'
      - 'kubernetes/**'

jobs:
  terraform-plan-prod:
    name: 'Terraform Plan Prod'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      POSTGRES_SUPER_USER_PW: ${{ secrets.POSTGRES_SUPER_USER_PW }}
      POSTGRES_REPLICA_USER_PW: ${{ secrets.POSTGRES_REPLICA_USER_PW }}
    runs-on: ubuntu-latest
    environment: prod

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: ./terraform/aks-basic
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - run: >-
          terraform init
          -backend-config="storage_account_name=${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}"
          -backend-config="container_name=${{ secrets.TF_BACKEND_STORAGE_CONTAINER }}"
          -backend-config="key=${{ secrets.TF_BACKEND_STORAGE_KEY }}"
          -backend-config="resource_group_name=${{ secrets.TF_BACKEND_STORAGE_RESOURCE_GROUP }}"
      - run: terraform validate
      - run: >-
          terraform plan
          -no-color
          -out=prod.tfplan
          -var="product=lifeishao"
          -var="environment=prod"
      - run: terraform apply -auto-approve prod.tfplan
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: azure/setup-helm@v3
        name: install helm
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
      - uses: azure/setup-kubectl@v3
        name: install kubectl
      - uses: azure/aks-set-context@v3
        with:
          resource-group: 'rg-lifeishao-prod'
          cluster-name: 'aks-lifeishao-prod'
      - run: kubectl get pods
      - run: |
          kubectl apply -f ./kubernetes/kubegres/kubegres.yaml
          envsubst < ./kubernetes/kubegres/secrets.yaml | kubectl apply -f 
          kubectl apply -f ./kubernetes/kubegres/cluster.yaml